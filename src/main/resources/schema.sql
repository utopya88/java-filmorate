-- удаляем все таблицы
DROP TABLE PUBLIC.marks IF EXISTS;
DROP TABLE PUBLIC.friends IF EXISTS;
DROP TABLE PUBLIC.reviews IF EXISTS;
DROP TABLE PUBLIC.feeds IF EXISTS;
DROP TABLE PUBLIC.users IF EXISTS;
DROP TABLE PUBLIC.rating_mpa IF EXISTS cascade;
DROP TABLE PUBLIC.film_genre IF EXISTS;
DROP TABLE PUBLIC.genres IF EXISTS;
DROP TABLE PUBLIC.film_director IF EXISTS;
DROP TABLE PUBLIC.directors IF EXISTS;
DROP TABLE PUBLIC.films IF EXISTS;

-- создаем все таблицы
CREATE TABLE IF NOT EXISTS users (
    user_id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    user_name varchar(50),
    email varchar(50) NOT NULL,
    login varchar(50) NOT NULL,
    birthday date NOT NULL
);

CREATE TABLE IF NOT EXISTS friends (
    request_friend_id bigint REFERENCES public.users(user_id) ON UPDATE RESTRICT ON DELETE CASCADE,
    response_friend_id bigint REFERENCES public.users(user_id) ON UPDATE RESTRICT ON DELETE CASCADE,
    CONSTRAINT FRIENDS_PK PRIMARY KEY (request_friend_id, response_friend_id)
);

CREATE TABLE IF NOT EXISTS rating_mpa (
    rating_mpa_id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    rating_mpa_name varchar(15) NOT NULL,
    description varchar(100) NOT NULL
);

CREATE TABLE IF NOT EXISTS films (
   film_id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
   film_name varchar(100) NOT NULL,
   description varchar(200),
   release_date date,
   duration integer,
   rate integer,
   rating_mpa_id bigint REFERENCES public.rating_mpa(rating_mpa_id) ON UPDATE RESTRICT ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS genres (
    genre_id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    genre_name varchar(100)
);

CREATE TABLE IF NOT EXISTS film_genre (
    film_id bigint REFERENCES public.films(film_id) ON UPDATE RESTRICT ON DELETE CASCADE,
    genre_id bigint REFERENCES public.genres(genre_id) ON UPDATE RESTRICT ON DELETE CASCADE,
    CONSTRAINT FILM_GENRE_PK PRIMARY KEY (film_id, genre_id)
);

CREATE TABLE IF NOT EXISTS directors (
  director_id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  director_name varchar(100)
);

CREATE TABLE IF NOT EXISTS film_director (
  film_id bigint REFERENCES public.films(film_id) ON UPDATE RESTRICT ON DELETE CASCADE,
  director_id bigint REFERENCES public.directors(director_id) ON UPDATE RESTRICT ON DELETE CASCADE,
  CONSTRAINT FILM_DIRECTOR_PK PRIMARY KEY (film_id, director_id)
);

CREATE TABLE IF NOT EXISTS marks (
    user_id bigint REFERENCES public.users(user_id) ON UPDATE RESTRICT ON DELETE CASCADE,
    film_id bigint REFERENCES public.films(film_id) ON UPDATE RESTRICT ON DELETE CASCADE,
    mark integer NOT NULL DEFAULT 6,
    CONSTRAINT GRADES_PK PRIMARY KEY (user_id, film_id)
);

create TABLE IF NOT EXISTS reviews (
    review_id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    review_content varchar(1000) NOT NULL,
    is_positive boolean NOT NULL,
    user_id bigint REFERENCES public.users(user_id) ON UPDATE RESTRICT ON delete CASCADE,
    film_id bigint REFERENCES public.films(film_id) ON UPDATE RESTRICT ON delete CASCADE,
    useful integer NOT NULL
);

CREATE TABLE IF NOT EXISTS feeds (
    event_id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    user_id bigint REFERENCES public.users(user_id) ON DELETE CASCADE,
    timestamp bigint,
    event_type varchar(30) NOT NULL,
    operation varchar(30) NOT NULL,
    entity_id bigint
);